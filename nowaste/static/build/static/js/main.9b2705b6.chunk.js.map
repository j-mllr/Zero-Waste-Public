{"version":3,"sources":["Create.js","List.js","Home.js","App.js","serviceWorker.js","store/configureStore.js","index.js"],"names":["TYPES","Create","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","assetList","dropPin","assetName","assetType","assetAddress","assetLong","assetLat","error","errorMessage","getAddress","bind","assertThisInitialized","pinDropped","validateForm","result","nameLength","text","length","place_name","slice","e","tempGeoJson","type","geometry","coordinates","lngLat","map","getSource","setData","setState","preventDefault","_this2","geocoder","MapboxGeocoder","accessToken","lastPage","loaded","removeHomeMapStyles","setTimeout","console","log","on","addSource","data","features","addLayer","id","source","layout","icon-image","icon-size","addControl","ev","dispatch","function","_i","_TYPES","off","removeableFunction","getLayer","removeLayer","removeSource","_this3","react_default","a","createElement","Fragment","react_router_dom","to","method","htmlFor","name","value","onChange","target","required","defaultValue","disabled","onClick","React","Component","connect","isGeocoderVisible","List","List_SearchBar","stateHandler","plotAssets","className","asset","List_ListItem","chosenAsset","color","updateChosenAsset","key","properties","asset_name","updateIdToRefMap","ListItem","myRef","createRef","ref","style","SearchBar","searchTerm","handleSubmit","event","_this4","getData","fetch","then","response","json","myJson","_this5","onSubmit","placeholder","SYMBOL","Donation","Second Hand","Repair","Reduced Packaging","Share","Home","chosenId","assetLayerTypes","Set","idToRefMap","Map","updateAssetList","setAsset","updateMapAssets","createPopUp","popUps","document","getElementsByClassName","remove","closePopUp","flyTo","center","zoom","description","asset_type","address","html","postal_code","mapboxgl","Popup","setLngLat","setHTML","addTo","selectedAsset","find","get","current","scrollIntoView","behavior","block","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","types","layerID","add","paint","circle-radius","circle-color","filter","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","copyOfMap","set","flyToAsset","newList","catch","newProps","oldProps","removeCreateMapStyles","removeControl","List_List","App","App_Main","Main","react_router","exact","path","render","routeProps","src_Home","src_Create","Boolean","window","location","hostname","match","defaultList","defaultState","store","createStore","arguments","action","_objectSpread","container","ReactDOM","es","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b2705b6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { NavLink } from 'react-router-dom';\nimport MapboxGeocoder from 'mapbox-gl-geocoder';\nimport { connect } from 'react-redux';\n\nlet TYPES = ['Donation', 'Second Hand', 'Repair', 'Reduced Packaging', 'Share'];\nlet accessToken =\n  'pk.eyJ1Ijoiam1pbGxhciIsImEiOiJjano5NnpiY2kwOXAzM2NsbzJrNmdzNnFtIn0.0wsjbxKPo2ngn-Q5D7H_DA';\n\nclass Create extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getAddress = this.getAddress.bind(this);\n    this.pinDropped = this.pinDropped.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n  }\n\n  state = {\n    assetList: null,\n    dropPin: false,\n    assetName: '',\n    assetType: '',\n    assetAddress: '',\n    assetLong: '',\n    assetLat: '',\n    error: false,\n    errorMessage: ''\n  };\n\n  getAddress(result) {\n    let nameLength = result.text.length;\n    return result.place_name.slice(nameLength + 2);\n  }\n\n  pinDropped(e) {\n    let tempGeoJson = {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: [e.lngLat['lng'], e.lngLat['lat']]\n      }\n    };\n\n    if (this.state.dropPin === true) {\n      this.props.map.getSource('single-point').setData(tempGeoJson);\n      this.setState({ assetLong: e.lngLat['lng'] });\n      this.setState({ assetLat: e.lngLat['lat'] });\n    }\n  }\n\n  validateForm(e) {\n    if (this.state.assetName === '') {\n      e.preventDefault();\n      this.setState({\n        error: true,\n        errorMessage: 'Please fill in the asset name'\n      });\n    } else if (this.state.assetType === '') {\n      e.preventDefault();\n      this.setState({ error: true, errorMessage: 'Asset type is required' });\n    } else if (this.state.assetLong === '' || this.state.assetLat === '') {\n      e.preventDefault();\n      this.setState({\n        error: true,\n        errorMessage: 'Please use the search or drop a pin'\n      });\n    }\n  }\n\n  componentDidMount() {\n    let map = this.props.map;\n    var geocoder = new MapboxGeocoder({\n      accessToken: accessToken\n    });\n\n    if (this.props.lastPage === 'HOME') {\n      if (!this.props.map.loaded()) {\n        setTimeout(() => {\n          console.log('Map not loaded - delay');\n          this.removeHomeMapStyles(map);\n        }, 1500);\n      } else {\n        this.removeHomeMapStyles(map);\n      }\n    } else {\n      map.on('load', () => {\n        console.log('on create load');\n        map.addSource('single-point', {\n          type: 'geojson',\n          data: {\n            type: 'FeatureCollection',\n            features: []\n          }\n        });\n        map.addLayer({\n          id: 'point',\n          type: 'symbol',\n          source: 'single-point',\n          layout: {\n            'icon-image': 'marker-15',\n            'icon-size': 1.5\n          }\n        });\n        map.addSource('locations', {\n          type: 'geojson',\n          data: this.state.assetList\n        });\n      });\n    }\n\n    map.addControl(geocoder);\n    geocoder.on('result', ev => {\n      map.getSource('single-point').setData(ev.result.geometry);\n      this.setState({\n        assetName: ev.result.text,\n        assetAddress: this.getAddress(ev.result),\n        assetLong: ev.result.geometry.coordinates[0],\n        assetLat: ev.result.geometry.coordinates[1],\n        dropPin: false\n      });\n    });\n\n    map.on('click', this.pinDropped);\n    this.props.dispatch({\n      type: 'ON_CREATE',\n      data: geocoder,\n      function: this.pinDropped\n    });\n  }\n\n  removeHomeMapStyles(map) {\n    for (let type of TYPES) {\n      map.off('click', 'poi-' + type, this.props.removeableFunction);\n      if (map.getLayer('poi-' + type)) {\n        map.removeLayer('poi-' + type);\n      }\n    }\n\n    if (this.props.assetList.features.length > 0) {\n      map.removeSource('locations');\n      map.addSource('locations', {\n        type: 'geojson',\n        data: this.state.assetList\n      });\n    }\n\n    map.addSource('single-point', {\n      type: 'geojson',\n      data: {\n        type: 'FeatureCollection',\n        features: []\n      }\n    });\n\n    map.addLayer({\n      id: 'point',\n      type: 'symbol',\n      source: 'single-point',\n      layout: {\n        'icon-image': 'marker-15',\n        'icon-size': 1.5\n      }\n    });\n  }\n\n  render() {\n    let errorMessage = '';\n    if (this.state.error) {\n      errorMessage = this.state.errorMessage;\n    }\n\n    return (\n      <>\n        <div id=\"mainHeader\">\n          Zero Waste Asset Map\n          <div id=\"navigation\">\n            <nav>\n              <div id=\"home\">\n                {' '}\n                <NavLink to=\"/\">Home</NavLink>{' '}\n              </div>\n              <div id=\"create\">\n                {' '}\n                <NavLink to=\"/create\">Create </NavLink>\n              </div>\n            </nav>\n          </div>\n        </div>\n        <div id=\"appContainer\">\n          <div id=\"content\">\n            <div>\n              <h1 id=\"createHeader\">Add an asset</h1>\n            </div>\n            <div id=\"errorMessage\"> {errorMessage} </div>\n            <form method=\"post\">\n              <div id=\"assetBoxes\">\n                <label id=\"nameLabel\" htmlFor=\"asset_name\">\n                  Asset Name\n                </label>\n                <input\n                  name=\"asset_name\"\n                  id=\"asset_name\"\n                  value={this.state.assetName}\n                  onChange={e => this.setState({ assetName: e.target.value })}\n                  required\n                />\n                <label id=\"typeLabel\" htmlFor=\"asset_type\">\n                  Asset Type\n                </label>\n                <select\n                  name=\"asset_type\"\n                  defaultValue=\"Default\"\n                  onChange={e => {\n                    this.setState({ assetType: e.target.value });\n                  }}\n                  required\n                >\n                  <option disabled value=\"Default\">\n                    -- Select a type --\n                  </option>\n                  <option value=\"Donation\">Donation</option>\n                  <option value=\"Repair\">Repair</option>\n                  <option value=\"Reduced Packaging\">Reduced Packaging</option>\n                  <option value=\"Second Hand\">Second-Hand</option>\n                  <option value=\"Share\">Share</option>\n                </select>\n                <label id=\"addressLabel\" htmlFor=\"asset_address\">\n                  Address\n                </label>\n                <textarea\n                  name=\"asset_address\"\n                  id=\"asset_address\"\n                  value={this.state.assetAddress}\n                  onChange={e =>\n                    this.setState({ assetAddress: e.target.value })\n                  }\n                ></textarea>\n                <input\n                  type=\"hidden\"\n                  name=\"latitude\"\n                  id=\"latitude\"\n                  value={this.state.assetLat}\n                  onChange={e => this.setState({ assetLat: e.target.value })}\n                />\n                <input\n                  type=\"hidden\"\n                  name=\"longitude\"\n                  id=\"longitude\"\n                  value={this.state.assetLong}\n                  onChange={e => this.setState({ assetLong: e.target.value })}\n                />\n                <input\n                  id=\"submitButton\"\n                  type=\"submit\"\n                  value=\"Submit\"\n                  onClick={e => this.validateForm(e)}\n                />\n                <button\n                  type=\"button\"\n                  id=\"dropPin\"\n                  onClick={e =>\n                    this.setState({\n                      dropPin: true,\n                      assetLat: '',\n                      assetLong: '',\n                      assetAddress: ''\n                    })\n                  }\n                >\n                  {' '}\n                  Drop pin{' '}\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default connect(function mapStateToProps(state, props) {\n  return {\n    assetList: state.assetList,\n    isGeocoderVisible: state.geocoder,\n    lastPage: state.lastPage,\n    removeableFunction: state.removeableFunction\n  };\n})(Create);\n","import React from 'react';\n\nexport default class List extends React.Component {\n  render() {\n    return (\n      <>\n        <SearchBar\n          stateHandler={this.props.stateHandler}\n          plotAssets={this.props.plotAssets}\n        />\n        <div id=\"assetList\">\n          <div className=\"assets\">\n            {!this.props.assetList.features.length > 0 &&\n              this.props.lastPage !== 'CREATE' && <div>No assets found</div>}\n            {this.props.assetList.features.map(asset => (\n              <ListItem\n                chosenAsset={\n                  asset === this.props.chosenAsset\n                    ? { color: 'red' }\n                    : { color: 'black' }\n                }\n                updateChosenAsset={this.props.updateChosenAsset}\n                asset={asset}\n                key={asset.properties.id}\n                name={asset.properties.asset_name}\n                updateIdToRefMap={this.props.updateIdToRefMap}\n              />\n            ))}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nclass ListItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.props.updateIdToRefMap(this.props.asset, this.myRef);\n  }\n\n  render() {\n    return (\n      <a\n        ref={this.myRef}\n        style={this.props.chosenAsset}\n        onClick={e => {\n          this.props.updateChosenAsset(this.props.asset, this.myRef);\n        }}\n        id={this.props.id}\n      >\n        {this.props.name}\n      </a>\n    );\n  }\n}\n\nclass SearchBar extends React.Component {\n  state = { searchTerm: '' };\n  getData(stateHandler) {\n    fetch('/geojson/' + this.state.searchTerm)\n      .then(response => {\n        return response.json();\n      })\n      .then(myJson => {\n        stateHandler(myJson);\n      });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.getData(this.props.stateHandler);\n  };\n\n  render() {\n    return (\n      <div id=\"stickyHeader\">\n        <h1 id=\"assets\">\n          Assets\n          <form id=\"searchForm\" onSubmit={this.handleSubmit}>\n            <input\n              id=\"searchInput\"\n              placeholder=\"Search...\"\n              type=\"text\"\n              name=\"name\"\n              onChange={event =>\n                this.setState({ searchTerm: event.target.value })\n              }\n            />\n          </form>\n        </h1>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport mapboxgl from 'mapbox-gl';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport List from './List.js';\n\nconst SYMBOL = {\n  Donation: '#0D7FFF',\n  'Second Hand': '#FFBE2A',\n  Repair: '#E700FF',\n  'Reduced Packaging': '#009393',\n  Share: '#FF3919'\n};\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateAssetList = this.updateAssetList.bind(this);\n    this.updateChosenAsset = this.updateChosenAsset.bind(this);\n    this.setAsset = this.setAsset.bind(this);\n    this.plotAssets = this.plotAssets.bind(this);\n    this.updateMapAssets = this.updateMapAssets.bind(this);\n    this.createPopUp = this.createPopUp.bind(this);\n    this.updateIdToRefMap = this.updateIdToRefMap.bind(this);\n  }\n  state = {\n    assetList: this.props.assetList,\n    chosenId: null,\n    chosenAsset: null,\n    assetLayerTypes: new Set(),\n    idToRefMap: new Map()\n  };\n\n  closePopUp() {\n    var popUps = document.getElementsByClassName('mapboxgl-popup');\n    if (popUps[0]) {\n      popUps[0].remove();\n    }\n  }\n\n  flyToAsset(chosenAsset) {\n    this.closePopUp();\n    let map = this.props.map;\n    map.flyTo({\n      center: chosenAsset.geometry.coordinates.slice(),\n      zoom: 15\n    });\n  }\n\n  createPopUp(e) {\n    let map = this.props.map;\n    var coordinates = e.features[0].geometry.coordinates.slice();\n    var description = e.features[0].properties;\n\n    let { id, asset_name, asset_type, address, postal_code } = description;\n\n    let html = '';\n    if (asset_type === 'ReducedPackaging') {\n      html =\n        '<data class=' +\n        id +\n        '></data>' +\n        '<div class=popName>' +\n        asset_name +\n        '</div>' +\n        '<div class=infoGrid> <div class=popAddressLabel> Address: </div>  <div class=popAddress>' +\n        address +\n        '</div>' +\n        '<div class=typeLabel> Type: </div> <div class=type> Reduced Packaging </div> </div>';\n    } else if (asset_type === 'SecondHand') {\n      html =\n        '<data class=' +\n        id +\n        '></data>' +\n        '<div class=popName>' +\n        asset_name +\n        '</div>' +\n        '<div class=infoGrid> <div class=popAddressLabel> Address: </div>  <div class=popAddress>' +\n        address +\n        '</div>' +\n        '<div class=typeLabel> Type: </div> <div class=type>  Second Hand </div> </div>';\n    } else {\n      html =\n        '<data class=' +\n        id +\n        '></data>' +\n        '<div class=popName>' +\n        asset_name +\n        '</div>' +\n        '<div class=infoGrid> <div class=popAddressLabel> Address: </div>  <div class=popAddress>' +\n        address +\n        '</div>' +\n        '<div class=typeLabel> Type: </div> <div class=type>' +\n        asset_type +\n        '</div> </div>';\n    }\n\n    new mapboxgl.Popup()\n      .setLngLat(coordinates)\n      .setHTML(html)\n      .addTo(map);\n\n    let selectedAsset = this.state.assetList.features.find(\n      asset => id === asset.properties.id\n    );\n    let currentRef = this.state.idToRefMap.get(selectedAsset.properties.id);\n    currentRef.current.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n    this.setState({ chosenAsset: selectedAsset });\n  }\n\n  updateMapAssets() {\n    let map = this.props.map;\n\n    for (let type of this.state.assetLayerTypes) {\n      map.off('click', 'poi-' + type, this.createPopUp);\n      map.removeLayer('poi-' + type);\n    }\n\n    map.removeSource('locations');\n    map.addSource('locations', {\n      type: 'geojson',\n      data: this.state.assetList\n    });\n\n    let types = new Set();\n    this.state.assetList.features.map(asset => {\n      let type = asset.properties.asset_type;\n      let layerID = 'poi-' + type;\n      types.add(type);\n      if (!map.getLayer(layerID)) {\n        map.addLayer({\n          id: layerID,\n          source: 'locations',\n          type: 'circle',\n          paint: {\n            'circle-radius': 8,\n            'circle-color': SYMBOL[type]\n          },\n          filter: ['==', 'asset_type', type]\n        });\n      }\n    });\n\n    this.setState({ assetLayerTypes: types });\n\n    for (let type of types) {\n      let layerID = 'poi-' + type;\n      map.on('click', layerID, this.createPopUp);\n    }\n  }\n\n  plotAssets() {\n    let map = this.props.map;\n\n    map.on('load', () => {\n      map.addSource('locations', {\n        type: 'geojson',\n        data: this.state.assetList\n      });\n\n      let types = new Set();\n\n      this.state.assetList.features.map(asset => {\n        let type = asset.properties.asset_type;\n        let layerID = 'poi-' + type;\n        types.add(type);\n        if (!map.getLayer(layerID)) {\n          map.addLayer({\n            id: layerID,\n            source: 'locations',\n            type: 'circle',\n            paint: {\n              'circle-radius': 8,\n              'circle-color': SYMBOL[type]\n            },\n            filter: ['==', 'asset_type', type]\n          });\n        }\n      });\n\n      this.setState({ assetLayerTypes: types });\n\n      for (let type of types) {\n        let layerID = 'poi-' + type;\n        map.on('click', layerID, this.createPopUp);\n      }\n    });\n  }\n\n  updateChosenAsset(asset) {\n    this.setState({\n      chosenId: asset\n    });\n  }\n\n  updateIdToRefMap(asset, ref) {\n    let copyOfMap = this.state.idToRefMap;\n    copyOfMap.set(asset.properties.id, ref);\n    this.setState({ idToRefMap: copyOfMap });\n  }\n\n  setAsset(asset, ref) {\n    this.setState({\n      chosenAsset: asset\n    });\n    this.flyToAsset(asset);\n  }\n\n  updateAssetList(newList) {\n    this.props.dispatch({\n      type: 'UPDATE_ASSETS',\n      data: newList,\n      function: this.createPopUp\n    });\n  }\n\n  getData() {\n    fetch('/geojson')\n      .then(response => {\n        return response.json();\n      })\n      .then(myJson => {\n        this.props.dispatch({\n          type: 'UPDATE_ASSETS',\n          data: myJson,\n          function: this.createPopUp\n        });\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  componentWillReceiveProps(newProps) {\n    const oldProps = this.props;\n    if (oldProps.assetList !== newProps.assetList) {\n      if (oldProps.lastPage === 'NONE') {\n        this.setState({ assetList: newProps.assetList }, this.plotAssets);\n      } else {\n        this.setState({ assetList: newProps.assetList }, this.updateMapAssets);\n      }\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.lastPage === 'CREATE') {\n      if (!this.props.map.loaded()) {\n        setTimeout(() => {\n          console.log('Map not loaded - delay');\n          this.removeCreateMapStyles();\n        }, 1000);\n      } else {\n        this.removeCreateMapStyles();\n      }\n    } else if (this.props.lastPage === 'NONE') {\n      this.getData();\n    } else if (this.props.lastPage === 'HOME') {\n      this.updateMapAssets();\n    }\n  }\n\n  removeCreateMapStyles() {\n    this.props.map.removeControl(this.props.isGeocoderVisible);\n    this.props.map.off('click', this.props.removeableFunction);\n    this.props.map.removeLayer('point');\n    this.props.map.removeSource('single-point');\n    this.getData();\n  }\n\n  render() {\n    return (\n      <>\n        <div id=\"mainHeader\">\n          Zero Waste Asset Map\n          <div id=\"navigation\">\n            <nav>\n              <div id=\"home\">\n                {' '}\n                <NavLink to=\"/\">Home</NavLink>{' '}\n              </div>\n              <div id=\"create\">\n                {' '}\n                <NavLink to=\"/create\">Create </NavLink>\n              </div>\n            </nav>\n          </div>\n        </div>\n        <div id=\"appContainer\">\n          <div id=\"content\">\n            <List\n              stateHandler={this.updateAssetList}\n              updateChosenAsset={this.setAsset}\n              chosenAsset={this.state.chosenAsset}\n              assetList={this.props.assetList}\n              plotAssets={this.plotAssets}\n              updateIdToRefMap={this.updateIdToRefMap}\n              lastPage={this.props.lastPage}\n            />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default connect(function mapStateToProps(state, props) {\n  return {\n    assetList: state.assetList,\n    isGeocoderVisible: state.geocoder,\n    lastPage: state.lastPage,\n    removeableFunction: state.removeableFunction\n  };\n})(Home);\n","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport Create from './Create';\nimport Home from './Home';\nimport { connect } from 'react-redux';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <>\n        <Main map={this.props.map}></Main>\n      </>\n    );\n  }\n}\n\nexport default connect(function mapStateToProps(state, props) {\n  return {\n    assetList: state.assetList,\n    isGeocoderVisible: state.geocoder\n  };\n})(App);\n\nconst Main = props => (\n  <Switch>\n    <Route\n      exact\n      path=\"/\"\n      render={routeProps => <Home map={props.map} />}\n    ></Route>\n    <Route\n      exact\n      path=\"/create\"\n      render={routeProps => <Create map={props.map} />}\n    ></Route>\n  </Switch>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from 'redux';\n\nlet defaultList = { type: 'FeatureCollection', features: [] };\n\nfetch('/geojson')\n  .then(response => {\n    return response.json();\n  })\n  .then(myJson => {\n    defaultList = myJson;\n  })\n  .catch(e => {\n    console.log(e);\n  });\n\nvar defaultState = {\n  assetList: defaultList,\n  geocoder: null,\n  lastPage: 'NONE',\n  removeableFunction: null\n};\n\nfunction amount(state = defaultState, action) {\n  switch (action.type) {\n    case 'ON_CREATE':\n      return {\n        ...state,\n        assetList: { type: 'FeatureCollection', features: [] },\n        geocoder: action.data,\n        lastPage: 'CREATE',\n        removeableFunction: action.function\n      };\n    case 'UPDATE_ASSETS':\n      return {\n        ...state,\n        assetList: action.data,\n        geocoder: null,\n        lastPage: 'HOME',\n        removeableFunction: action.function\n      };\n    default:\n      return state;\n  }\n}\n\nvar store = createStore(amount);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport mapboxgl from 'mapbox-gl';\nimport { BrowserRouter } from 'react-router-dom';\nimport store from './store/configureStore';\nimport { Provider } from 'react-redux';\n\nmapboxgl.accessToken =\n  'pk.eyJ1Ijoiam1pbGxhciIsImEiOiJjano5NnpiY2kwOXAzM2NsbzJrNmdzNnFtIn0.0wsjbxKPo2ngn-Q5D7H_DA';\n\nlet map = new mapboxgl.Map({\n  container: 'map',\n  style: 'mapbox://styles/mapbox/light-v9',\n  center: [-123.1126, 49.2418],\n  zoom: 11\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App map={map} />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}